generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Goals {
  LOSE_WEIGHT
  GAIN_WEIGHT
  BUILD_MUSCLE
  TONE_AND_STRENGTHEN
  MAINTAIN_WEIGHT
  EAT_HEALTHY
  HEALTH_AND_LONGEVITY
  MANAGE_STRESS_AND_RECOVERY
}

enum Gender {
  MALE
  FEMALE
  OTHER
  RATHER_NOT_SAY
}

enum SessionPreference {
  LONGER_FEWER
  SHORTER_MORE
}

model FitnessGoal {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserGoals")
}

model User {
  id                      Int                     @id @default(autoincrement())
  firebaseUid             String                  @unique
  email                   String
  username                String?                 @unique
  createdAt               DateTime                @default(now())
  firstName               String?
  lastName                String?
  age                     Int?
  gender                  Gender?
  occupation              String?
  inspiration             String?
  phone                   String?
  weeklyWorkoutHours      Float?
  sessionPreference       SessionPreference?
  dietaryRestrictions     String?
  heightCm                Float?
  weightKg                Float?
  goals                   FitnessGoal[]           @relation("UserGoals")
  lastLogin               DateTime?
  streakCount             Int                     @default(0)
  meals                   Meal[]
  workouts                Workout[]
  completedMealEntries    CompletedMealEntry[]
  completedWorkoutEntries CompletedWorkoutEntry[]
  hasCompletedOnboarding  Boolean                 @default(false)
}

model Meal {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  foodName  String
  calories  Float
  protein   Float
  carbs     Float
  fat       Float
  sodium    Float
  sugar     Float
  quantity  Float
  mealType  String
  date      DateTime @default(now())

  @@index([userId, date])
}

model Workout {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  workoutType     String
  name            String
  durationMinutes Float
  caloriesBurned  Float
  sets            Int
  reps            Int
  weight          Float
  notes           String
  date            DateTime @default(now())
  @@index([userId, date])
}

model CompletedMealEntry {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  date          DateTime
  summary       String
  totalCalories Float    @default(0)
  totalCarbs    Float    @default(0)
  totalFat      Float    @default(0)
  totalProtein  Float    @default(0)
  totalSodium   Float    @default(0)
  totalSugar    Float    @default(0)
  waterIntake   Float    @default(0)
  isCompleted   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
}

model CompletedWorkoutEntry {
  id                  Int      @id @default(autoincrement())
  userId              Int
  user                User     @relation(fields: [userId], references: [id])
  date                DateTime
  summary             String
  totalCaloriesBurned Float    @default(0)
  totalDuration       Float    @default(0)
  totalExercises      Int      @default(0)
  isCompleted         Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
}
